generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Visibility {
  STUDENT
  TEACHER
  BOTH
}

enum FeedbackStatus {
  PENDING       // İnceleme Bekliyor
  REVIEWED      // Değerlendirildi
  APPROVED      // Onaylandı
  REJECTED      // Reddedildi
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  password    String
  name        String
  role        Role
  teacherInfo TeacherInfo?
  feedbacks   Feedback[]   @relation("TeacherFeedbacks")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TeacherInfo {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  userId String   @unique @db.ObjectId
  branch String
}

model Content {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  ageGroup     String
  subject      String
  contentUrl   String
  activeFrom   DateTime
  activeUntil  DateTime
  visibility   Visibility
  createdBy    String
  feedbacks    Feedback[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Feedback {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  teacher     User           @relation("TeacherFeedbacks", fields: [teacherId], references: [id])
  teacherId   String         @db.ObjectId
  content     Content        @relation(fields: [contentId], references: [id])
  contentId   String         @db.ObjectId
  message     String
  status      FeedbackStatus @default(PENDING)
  adminReply  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}








// yorum satırında kalacak şuanlık
// model comments {
//   id       String   @id @default(auto()) @map("_id") @db.ObjectId
//   date     DateTime @db.Date
//   email    String
//   movie_id String   @db.ObjectId
//   name     String
//   text     String
// }

// model User {
//   // Bütün kullanıcılar için ortak alanlar.
//   id       String   @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   email    String?  @unique
//   password String
//   role     UserRole @default(STUDENT)

//   // öğrenciye özel alanlar
//   tcNo    String? @unique
//   groupId String? @db.ObjectId
//   group   Group?  @relation(fields: [groupId], references: [id])

//   // öğretmene özel alanlar
//   branchId String? @db.ObjectId
//   branch   Branch? @relation(fields: [branchId], references: [id])

//   createdAt         DateTime            @default(now())
//   updatedAt         DateTime            @updatedAt
//   Feedback          Feedback[]
//   Progress          Progress[]
//   ProgressBar       ProgressBar[]
//   ContentAccessRule ContentAccessRule[]
//   FeedbackMessage   FeedbackMessage[]
// }

// enum UserRole {
//   STUDENT
//   TEACHER
//   ADMIN
// }

// model Group {
//   id                 String              @id @default(auto()) @map("_id") @db.ObjectId
//   title              String
//   description        String?
//   students           User[]
//   // contents           Content[]
//   groupBranches      GroupBranch[]
//   contentAccessRules ContentAccessRule[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Branch {
//   id            String        @id @default(auto()) @map("_id") @db.ObjectId
//   name          String
//   teachers      User[]
//   contents      Content[]
//   groupBranches GroupBranch[]

//   createdAt         DateTime            @default(now())
//   updatedAt         DateTime            @updatedAt
//   ContentAccessRule ContentAccessRule[]
// }

// // Group ve Branch arasında many-to-many ilişki kuruldu. Bu sayede dersler birden fazla gruba atanabilir.
// model GroupBranch {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   group    Group  @relation(fields: [groupId], references: [id])
//   groupId  String @db.ObjectId
//   branch   Branch @relation(fields: [branchId], references: [id])
//   branchId String @db.ObjectId
// }

// model Content {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String?
//   type        ContentType // TODO: Bu kısımda ContentType Cloudflare R2 API'deki headerda bulunan "application/{type}" ile eşleşecek bir yapıda olabilir.
//   status      ContentStatus @default(SCHEDULED)
//   branchId    String        @db.ObjectId
//   branch      Branch        @relation(fields: [branchId], references: [id])
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt

//   //Linklere göre alanlar.
//   url String?

//   // Dosyalara göre alanlar.
//   fileName String?
//   r2key    String?

//   // Arşivleme kontrolü
//   isArchived Boolean   @default(false)
//   archivedAt DateTime?

//   contentAccessRules ContentAccessRule[]
//   Progress           Progress[]
// }

// model ContentAccessRule {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   contentId String   @db.ObjectId
//   content   Content  @relation(fields: [contentId], references: [id])
//   role      UserRole // STUDENT, TEACHER

//   // Öğrenciye özel alanlar
//   groupId String? @db.ObjectId
//   group   Group?  @relation(fields: [groupId], references: [id])

//   // Öğretmenlere özel alanlar.
//   branchId String? @db.ObjectId
//   branch   Branch? @relation(fields: [branchId], references: [id])

//   // Belirli bir öğretmene özel access durumuna özel alanlar.
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])

//   publishAt DateTime
//   endAt     DateTime

//   contentAccessDuration Int? // İçeriğin erişim süresi. Örneğin 1 hafta, 1 ay gibi.

//   // Bu kısımda öğrenci ve öğretmenin erişimi süreye takılmadan açık mı kapalı mı olacak kontorlü yapılır.
//   isPublished Boolean @default(false)
// }

// model Feedback {
//   id        String            @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String            @db.ObjectId
//   user      User              @relation(fields: [userId], references: [id])
//   title     String
//   messages  FeedbackMessage[]
//   status    FeedbackStatus    @default(PENDING)
//   createdAt DateTime          @default(now())
//   updatedAt DateTime          @updatedAt
// }

// model FeedbackMessage {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String   @db.ObjectId
//   user       User     @relation(fields: [userId], references: [id])
//   feedbackId String   @db.ObjectId
//   feedback   Feedback @relation(fields: [feedbackId], references: [id])
//   message    String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// enum FeedbackStatus {
//   PENDING
//   APPROVED
//   CANCELED
//   CLOSED
// }

// enum ContentStatus {
//   DRAFT // İçerik oluşturuldu ama daha bitmedi
//   SCHEDULED // Yayınlanma tarihi beklendiği için aktif değil
//   ACTIVE // Yayında
//   ARCHIVED // Yayından kaldırıldı
// }

// enum ContentType {
//   VIDEO
//   DOCUMENT
//   INTERACTIVE
//   GAME
// }

// // which student has completed what content
// model Progress {
//   id                 String         @id @default(auto()) @map("_id") @db.ObjectId
//   studentId          String         @db.ObjectId
//   student            User           @relation(fields: [studentId], references: [id])
//   contentId          String         @db.ObjectId
//   content            Content        @relation(fields: [contentId], references: [id])
//   status             ProgressStatus @default(NOT_STARTED)
//   completionDate     DateTime?
//   interactionDetails Json?
// }

// enum ProgressStatus {
//   NOT_STARTED
//   IN_PROGRESS
//   COMPLETED
// }

// model ProgressBar {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   studentId      String   @db.ObjectId
//   student        User     @relation(fields: [studentId], references: [id])
//   date           DateTime // tracks progress for a specific day or period
//   totalTasks     Int // total number of tasks assigned to the student
//   completedTasks Int // number of tasks the student has completed
//   progress       Float // percentage of tasks completed (calculated as completedTasks / totalTasks * 100)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// // it tracks system-wide statistics for admin
// model Statistics {
//   id                      String   @id @default(auto()) @map("_id") @db.ObjectId
//   date                    DateTime
//   totalStudents           Int
//   totalTasks              Int // New field to track the total number of tasks assigned
//   completedTasks          Int
//   activeStudents          Int
//   mostCompletedContentId  String?  @db.ObjectId
//   leastCompletedContentId String?  @db.ObjectId
//   activeHours             Json
// }
