generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Visibility {
  STUDENT
  TEACHER
  BOTH
}

enum FeedbackStatus {
  PENDING // İnceleme Bekliyor
  REVIEWED // Değerlendirildi
  APPROVED // Onaylandı
  REJECTED // Reddedildi
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  password    String
  name        String
  role        Role
  teacherInfo TeacherInfo?
  feedbacks   Feedback[]   @relation("TeacherFeedbacks")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TeacherInfo {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
  branch String
}

// RecentOrders.jsx -> Yeni icerik ekleme/duzenleme modalı icin
model Content {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  title              String // İçerik Başlığı
  type               String // İçerik Türü (Video, PDF, Sunum, Etkileşimli, Test)
  category           String // Kategori
  ageGroup           String // Yaş Grubu (3-6 Yaş, 7-10 Yaş, 11-14 Yaş, 15-18 Yaş)
  publishDateStudent DateTime? // Opsiyonel olarak işaretlendi
  publishDateTeacher DateTime? // Opsiyonel olarak işaretlendi
  endDateStudent     DateTime? // Opsiyonel olarak işaretlendi
  endDateTeacher     DateTime? // Opsiyonel olarak işaretlendi
  isActive           Boolean    @default(true) // Katılım Durumu
  fileUrl            String? // İçerik Dosyası (URL olarak saklanır)
  description        String? // İçerik Açıklaması
  tags               String[] // Etiketler (virgülle ayrılmış etiketler dizisi olarak saklanır)
  updatedAt          DateTime? // Opsiyonel olarak değiştirildi
  createdAt          DateTime?  @default(now()) // Opsiyonel olarak değiştirildi
  Feedback           Feedback[]
}

// Adminin Todo listi
model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     String
  priority    String
  status      String
  createdAt   DateTime? @default(now()) // Opsiyonel olarak değiştirildi
  updatedAt   DateTime? // Opsiyonel olarak değiştirildi
}

model Feedback {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  teacher    User           @relation("TeacherFeedbacks", fields: [teacherId], references: [id])
  teacherId  String         @db.ObjectId
  content    Content        @relation(fields: [contentId], references: [id])
  contentId  String         @db.ObjectId
  message    String
  status     FeedbackStatus @default(PENDING)
  adminReply String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model AccessSettings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  studentDays Int
  teacherDays Int
  updatedAt   DateTime @updatedAt
}
